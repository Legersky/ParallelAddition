︠72ce4c3e-3dac-41d9-834b-b821993e0203s︠
path='../classes/AlgorithmForParallelAddition.sage'

import re

f = open(path,'r')
s=' '
while s:
    t = f.readline()
    s=t.replace('_','\\_')
    if '#---' in s:
        print s[1:]
    if ' def ' in s:
        print '\\begin{method}{'+ s[s.find("def ")+4:s.find("(")] +'}{'+ s[s.find("self")+5:s.find(")")] + '}'
        print ''
        print '\\end{method}'
        print ''
        print ''
f.close()
︡8167caea-4e79-476a-b5ef-0f9658f9a59f︡︡{"stdout":"-----------------------------CONSTRUCTOR------------------------------------------------------------------------------------\n\n\\begin{method}{\\_\\_init\\_\\_}{ minPol\\_str, embd, alphabet, base, name='NumerationSystem', inputAlphabet='', printLog=True, printLogLatex=False, verbose=0}\n\n\\end{method}\n\n\n\\begin{method}{latexZomega}{}\n\n\\end{method}\n\n\n\\begin{method}{\\_\\_repr\\_\\_}{}\n\n\\end{method}\n\n\n-----------------------------SETTERS AND GETTERS----------------------------------------------------------------------------\n\n\\begin{method}{setAlphabet}{A}\n\n\\end{method}\n\n\n\\begin{method}{setInputAlphabet}{B}\n\n\\end{method}\n\n\n\\begin{method}{setSmallerIntegerInputAlphabet}{}\n\n\\end{method}\n\n\n\\begin{method}{setBase}{ base}\n\n\\end{method}\n\n\n\\begin{method}{addRepresentativesToMinMaxElement}{ \\_set}\n\n\\end{method}\n\n\n\\begin{method}{addRepresentativesToMinMaxElement\\_integer}{ \\_set}\n\n\\end{method}\n\n\n\\begin{method}{findAlphabet}{}\n\n\\end{method}\n\n\n\\begin{method}{findAlphabet2}{}\n\n\\end{method}\n\n\n\\begin{method}{findAlphabet\\_oneMore}{}\n\n\\end{method}\n\n\n\\begin{method}{coerceListIntoZomega}{\\_list}\n\n\\end{method}\n\n\n\\begin{method}{findIntegerAlphabet}{}\n\n\\end{method}\n\n\n\\begin{method}{findIntegerAlphabet2}{}\n\n\\end{method}\n\n\n\\begin{method}{findIntegerAlphabet3}{}\n\n\\end{method}\n\n\n\\begin{method}{addRepresentatives}{ \\_set, modulus}\n\n\\end{method}\n\n\n\\begin{method}{addSmallestNormRepresentatives}{ \\_set, modulus}\n\n\\end{method}\n\n\n\\begin{method}{getRingGenerator}{}\n\n\\end{method}\n\n\n\\begin{method}{getBase}{}\n\n\\end{method}\n\n\n\\begin{method}{getBaseCC}{}\n\n\\end{method}\n\n\n\\begin{method}{getAlphabet}{}\n\n\\end{method}\n\n\n\\begin{method}{getInputAlphabet}{}\n\n\\end{method}\n\n\n\\begin{method}{getMinPolynomial}{}\n\n\\end{method}\n\n\n\\begin{method}{getMinPolynomialOfBase}{}\n\n\\end{method}\n\n\n\\begin{method}{getWeightCoefSet}{}\n\n\\end{method}\n\n\n\\begin{method}{getWeightFunction}{}\n\n\\end{method}\n\n\n\\begin{method}{getName}{}\n\n\\end{method}\n\n\n\\begin{method}{getDictOfSetting}{}\n\n\\end{method}\n\n\n-----------------------------EXTENDING WINDOW METHOD------------------------------------------------------------------------\n\n\\begin{method}{\\_findWeightCoefSet}{ max\\_iterations, method\\_number}\n\n\\end{method}\n\n\n\\begin{method}{addWeightCoefSetIncrement}{ increment}\n\n\\end{method}\n\n\n\\begin{method}{\\_findWeightFunction}{ max\\_input\\_length,method\\_number}\n\n\\end{method}\n\n\n\\begin{method}{findWeightFunction}{ max\\_iterations=infinity, max\\_input\\_length=infinity, method\\_weightCoefSet=None, method\\_weightFunSearch=None}\n\n\\end{method}\n\n\n\\begin{method}{usedWeightCoefficients}{}\n\n\\end{method}\n\n\n-----------------------------ALPHABET CONTROL-------------------------------------------------------------------------------\n\n\\begin{method}{checkAlphabet}{}\n\n\\end{method}\n\n\n\\begin{method}{check\\_alphabet\\_for\\_representatives\\_from\\_set}{\\_set, modulus, log=True}\n\n\\end{method}\n\n\n\\begin{method}{check\\_alphabet\\_for\\_representatives\\_mod\\_base\\_minus\\_one}{}\n\n\\end{method}\n\n\n\\begin{method}{check\\_alphabet\\_for\\_representatives\\_mod\\_base}{}\n\n\\end{method}\n\n\n\\begin{method}{divide\\_into\\_congruent\\_classes}{\\_set,modulus}\n\n\\end{method}\n\n\n\\begin{method}{number\\_of\\_representatives}{modulus}\n\n\\end{method}\n\n\n\\begin{method}{findRepresentatives}{modulus}\n\n\\end{method}\n\n\n\\begin{method}{computeBound}{}\n\n\\end{method}\n\n\n\\begin{method}{computeBound\\_norm}{}\n\n\\end{method}\n\n\n-----------------------------PARALLEL ADDITION AND CONVERSION---------------------------------------------------------------\n\n\\begin{method}{addParallel}{a,b}\n\n\\end{method}\n\n\n\\begin{method}{parallelConversion}{\\_w}\n\n\\end{method}\n\n\n\\begin{method}{localConversion}{w}\n\n\\end{method}\n\n\n\\begin{method}{parallelConversion\\_using\\_localConversion}{w}\n\n\\end{method}\n\n\n-----------------------------SANITY CHECK-----------------------------------------------------------------------------------\n\n\\begin{method}{sanityCheck\\_addition}{ num\\_digits}\n\n\\end{method}\n\n\n\\begin{method}{sanityCheck\\_conversion}{ num\\_digits}\n\n\\end{method}\n\n\n-----------------------------AUXILIARY FUNCTIONS-------------------------------------------------------------------\n\n\\begin{method}{\\_findSmallest}{list\\_from\\_Ring}"}︡{"stdout":"\n\n\\end{method}\n\n\n\\begin{method}{\\_findAllSmallest}{list\\_from\\_Ring}\n\n\\end{method}\n\n\n\\begin{method}{\\_findAllSmallest\\_norm}{list\\_from\\_Ring}\n\n\\end{method}\n\n\n\\begin{method}{\\_findGreatest}{list\\_from\\_Ring}\n\n\\end{method}\n\n\n\\begin{method}{\\_findSmallest\\_norm}{list\\_from\\_Ring}\n\n\\end{method}\n\n\n\\begin{method}{naturalNorm}{num}\n\n\\end{method}\n\n\n\\begin{method}{naturalNorm\\_vect}{num}\n\n\\end{method}\n\n\n-----------------------------RING CONVERSIONS, AUXILIARY RING FUNCTIONS-----------------------------------------------------\n\n\\begin{method}{list2BaseRing}{ \\_digits}\n\n\\end{method}\n\n\n\\begin{method}{list2Ring}{ \\_digits}\n\n\\end{method}\n\n\n\\begin{method}{ring2NumberField}{ num\\_from\\_ring}\n\n\\end{method}\n\n\n\\begin{method}{ring2RR}{ num\\_from\\_ring, b}\n\n\\end{method}\n\n\n\\begin{method}{ring2CC}{ num\\_from\\_ring}\n\n\\end{method}\n\n\n\\begin{method}{getCoordinates}{ num}\n\n\\end{method}\n\n\n\\begin{method}{sumOfSets}{A,B}\n\n\\end{method}\n\n\n\\begin{method}{\\_computeCompanionMatrix}{num}\n\n\\end{method}\n\n\n\\begin{method}{\\_computeInverseCompanionMatrix}{num}\n\n\\end{method}\n\n\n\\begin{method}{divide}{divided\\_number, divide\\_by}\n\n\\end{method}\n\n\n\\begin{method}{divideByBase}{divided\\_number}\n\n\\end{method}\n\n\n-----------------------------PRINT FUNCTIONS--------------------------------------------------------------------------------\n\n\\begin{method}{addLog}{\\_log, latex=False}\n\n\\end{method}\n\n\n\\begin{method}{printWeightFunction}{}\n\n\\end{method}\n\n\n\\begin{method}{printWeightFunctionInfo}{}\n\n\\end{method}\n\n\n\\begin{method}{printWeightCoefSet}{}\n\n\\end{method}\n\n\n\\begin{method}{printLatexInfo}{ shortInput}\n\n\\end{method}\n\n\n\\begin{method}{setLatexBraces}{    def setLatexBraces(\\_list}\n\n\\end{method}\n\n\n-----------------------------PLOT FUNCTIONS---------------------------------------------------------------------------------\n\n\\begin{method}{plot}{ nums\\_from\\_ring, labeled=True, color='red', size=20, fontsize=10, allSameLabel=''}\n\n\\end{method}\n\n\n\\begin{method}{plotAlphabetDivididedIntoCongruenceClasses}{ modulus}\n\n\\end{method}\n\n\n\\begin{method}{plotAlphabet}{}\n\n\\end{method}\n\n\n\\begin{method}{plotWeightCoefSet}{estimation=False}\n\n\\end{method}\n\n\n\\begin{method}{plotLattice}{}\n\n\\end{method}\n\n\n\\begin{method}{polygon\\_shifted}{    def polygon\\_shifted(points,shift=0, enlargement=1.2, color='green'}\n\n\\end{method}\n\n\n\\begin{method}{plotPhase1}{legend\\_xshift=7,}\n\n\\end{method}\n\n\n\\begin{method}{polygon\\_shifted}{    def polygon\\_shifted(points,shift=0, enlargement=1, color='green'}\n\n\\end{method}\n\n\n\\begin{method}{legend}{    def legend(k,covered, new, alphabet}\n\n\\end{method}\n\n\n\\begin{method}{plotPhase2}{ digits,}\n\n\\end{method}\n\n\n\\begin{method}{polygon\\_shifted2}{    def polygon\\_shifted2(points,shift=0, enlargement=1, color='green'}\n\n\\end{method}\n\n\n-----------------------------SAVE FUNCTIONS---------------------------------------------------------------------------------\n\n\\begin{method}{saveInfoToTexFile}{ filename, header=True, shortInput=False}\n\n\\end{method}\n\n\n\\begin{method}{saveLog}{ filename}\n\n\\end{method}\n\n\n\\begin{method}{saveWeightFunctionToTexFile}{ filename}\n\n\\end{method}\n\n\n\\begin{method}{saveWeightFunctionToCsvFile}{ filename}\n\n\\end{method}\n\n\n\\begin{method}{saveLocalConversionToCsvFile}{ filename}\n\n\\end{method}\n\n\n\\begin{method}{saveUnsolvedInputsToCsv}{ filename}\n\n\\end{method}\n\n\n\\begin{method}{inputSettingToSageFile}{ filename}\n\n\\end{method}\n\n\n           print '#---------------INPUTS---------------'\n\n           print '#------------SETTING--------------------'\n\n           print '#------------SAVING---------------------'\n\n           print '#------------IMAGES--------------------'\n\n\\begin{method}{saveImages}{images, folder,name, img\\_size=10}\n\n\\end{method}\n\n\n\\begin{method}{saveToGoogleSpreadsheet}{\\_worksheet, row}\n\n\\end{method}\n\n\n\\begin{method}{saveResults}{ elapsed\\_time, message='', note=''}\n\n\\end{method}\n\n\n\\begin{method}{compareMethodsPhase1}{ methods,note, max\\_iterations=1000}\n\n\\end{method}\n\n\n"}︡{"done":true}
︠98809d7d-1130-40c6-b14c-32a779c4df36︠
︡4410c59d-5156-43d6-bbbb-8fd01c39b174︡
︠a7dd3161-c96c-4ac6-996c-1792d5a68844︠









